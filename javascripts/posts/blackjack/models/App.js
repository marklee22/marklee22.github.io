// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      var deck, discardPile, playerHand;

      this.set('discardPile', discardPile = new DiscardPile());
      this.set('isDealerTurn', false);
      this.set('isGameOver', false);
      this.set('status', '');
      this.set('deck', deck = new Deck());
      this.set('playerHand', playerHand = deck.dealPlayer(discardPile));
      this.set('dealerHand', deck.dealDealer(discardPile));
      this.get('playerHand').on('lose', this.gameOver, this);
      this.get('playerHand').on('blackjack', this.blackJack, this);
      this.get('playerHand').on('endTurn', this.dealerStart, this);
      this.get('deck').on('runningLow', this.reshuffle, this);
      return playerHand.deal();
    };

    App.prototype.calculateWinner = function() {
      var dealerScore, playerScore;

      playerScore = this.get('playerHand').getBestScore();
      dealerScore = this.get('dealerHand').getBestScore();
      if (dealerScore > 21 || playerScore > dealerScore) {
        return this.gameOver(this.get('dealerHand'));
      } else if (dealerScore > playerScore) {
        return this.gameOver(this.get('playerHand'));
      } else {
        return this.gameOver();
      }
    };

    App.prototype.reshuffle = function(deck) {
      var discardPile;

      discardPile = this.get('discardPile');
      this.get('discardPile').each(function(card) {
        deck.add(card);
        card.set('revealed', true);
        return discardPile.remove(card);
      });
      return this.get('deck').shuffle();
    };

    App.prototype.gameOver = function(hand) {
      if (hand === this.get('dealerHand')) {
        this.set('status', 'won');
      } else if (hand === this.get('playerHand')) {
        this.set('status', 'lost');
      } else {
        this.set('status', 'tied');
      }
      return this.set('isGameOver', true);
    };

    App.prototype.blackJack = function() {
      return this.gameOver(this.get('dealerHand'));
    };

    App.prototype.newRound = function() {
      this.get('playerHand').discard();
      this.get('dealerHand').discard();
      this.get('playerHand').deal();
      this.get('dealerHand').deal();
      this.set('isDealerTurn', false);
      this.set('isGameOver', false);
      return this.set('status', '');
    };

    App.prototype.dealerStart = function() {
      var score;

      this.set('isDealerTurn', true);
      this.get('dealerHand').each(function(card) {
        return card.set('revealed', true);
      });
      while ((score = this.get('dealerHand').getBestScore() < 17)) {
        this.get('dealerHand').hit();
      }
      return this.calculateWinner();
    };

    return App;

  })(Backbone.Model);

}).call(this);

/*
//@ sourceMappingURL=App.map
*/
