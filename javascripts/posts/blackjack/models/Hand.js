// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      _ref = Hand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer, discardPile) {
      var _this = this;

      this.deck = deck;
      this.isDealer = isDealer;
      this.discardPile = discardPile;
      this.on('add', function() {
        return _this.check();
      });
      return this.model;
    };

    Hand.prototype.discard = function() {
      var _results;

      _results = [];
      while (this.length > 0) {
        _results.push(this.discardPile.add(this.pop()));
      }
      return _results;
    };

    Hand.prototype.deal = function() {
      if (this.isDealer) {
        this.add(this.deck.pop().set('revealed', false));
      } else {
        this.add(this.deck.pop());
      }
      return this.add(this.deck.pop()).last();
    };

    Hand.prototype.hit = function() {
      if (!(this.scores().every(function(score) {
        return score > 21;
      }))) {
        return this.add(this.deck.pop()).last();
      }
    };

    Hand.prototype.check = function() {
      if (this.length === 2 && this.scores()[1] === 21) {
        return this.trigger('blackjack', this);
      } else if (this.scores().every(function(score) {
        return score > 21;
      })) {
        return this.trigger('lose', this);
      }
    };

    Hand.prototype.stand = function() {
      return this.trigger('endTurn', this);
    };

    Hand.prototype.getScoreMessage = function() {
      var scores;

      scores = this.scores();
      if (scores.length === 2) {
        if (scores[0] < 22 && scores[1] < 22) {
          return scores[0] + ' or ' + scores[1];
        } else {
          return scores[0];
        }
      } else if (this.at(0).get('revealed') === true) {
        return this.getBestScore();
      } else {
        return scores[0];
      }
    };

    Hand.prototype.getBestScore = function() {
      var scores;

      scores = this.scores();
      if (scores.length === 1) {
        return scores[0];
      } else {
        return Math.max.apply(null, scores.filter(function(score) {
          return score <= 21;
        }));
      }
    };

    Hand.prototype.scores = function() {
      var hasAce, score;

      hasAce = this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      if (hasAce) {
        return [score, score + 10];
      } else {
        return [score];
      }
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

/*
//@ sourceMappingURL=Hand.map
*/
